// ------------------------------------------------------------------------------
//  <auto-generated>
//      Ce code a été généré par un générateur de test codé de l'interface utilisateur.
//      Version : 12.0.0.0 
//
//      Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//      le code est régénéré.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Ajout d'un client sans remplir un champ obligatoire (adresse 1)
        /// </summary>
        public void ajoutClientSansAdresseL1()
        {
            #region Variable Declarations
            WinButton uIGestiondesclientsButton = this.UIGamilonWindow.UIGestiondesclientsWindow.UIGestiondesclientsButton;
            WinButton uINouveauclientButton = this.UIGestiondesclientsWindow.UINouveauclientWindow.UINouveauclientButton;
            WinEdit uIPrenomClientEdit = this.UIAjouterunclientWindow.UIPrenomClientWindow.UIPrenomClientEdit;
            WinEdit uINomClientEdit = this.UIAjouterunclientWindow.UINomClientWindow.UINomClientEdit;
            WinEdit uICp_txtBoxEdit = this.UIAjouterunclientWindow.UICp_txtBoxWindow.UICp_txtBoxEdit;
            WinEdit uIVille_txtEdit = this.UIAjouterunclientWindow.UIVille_txtWindow.UIVille_txtEdit;
            WinEdit uITelClientEdit = this.UIAjouterunclientWindow.UITelClientWindow.UITelClientEdit;
            WinEdit uIMailClientEdit = this.UIAjouterunclientWindow.UIMailClientWindow.UIMailClientEdit;
            WinButton uIAjouterButton = this.UIAjouterunclientWindow.UIAjouterWindow.UIAjouterButton;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            WinClient uIAjouterunclientClient = this.UIAjouterunclientWindow.UIAjouterunclientClient;
            WinEdit uIAdr1ClientEdit = this.UIAjouterunclientWindow.UIAdr1ClientWindow.UIAdr1ClientEdit;
            #endregion

            // Clic 'Gestion des clients' bouton
            Mouse.Click(uIGestiondesclientsButton, new Point(51, 31));

            // Clic 'Nouveau client' bouton
            Mouse.Click(uINouveauclientButton, new Point(89, 31));

            // Taper 'Kévin' dans 'prenomClient' zone de texte
            uIPrenomClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIPrenomClientEditText;

            // Taper 'BASSE' dans 'nomClient' zone de texte
            uINomClientEdit.Text = this.ajoutClientSansAdresseL1Params.UINomClientEditText;

            // Taper '33000' dans 'cp_txtBox' zone de texte
            uICp_txtBoxEdit.Text = this.ajoutClientSansAdresseL1Params.UICp_txtBoxEditText;

            // Taper 'BORDEAUX' dans 'ville_txt' zone de texte
            uIVille_txtEdit.Text = this.ajoutClientSansAdresseL1Params.UIVille_txtEditText;

            // Taper '0559684950' dans 'telClient' zone de texte
            uITelClientEdit.Text = this.ajoutClientSansAdresseL1Params.UITelClientEditText;

            // Taper 'kevin.basse' dans 'mailClient' zone de texte
            uIMailClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIMailClientEditText;

            // Taper 'Alt, Control + 0' dans 'mailClient' zone de texte
            Keyboard.SendKeys(uIMailClientEdit, this.ajoutClientSansAdresseL1Params.UIMailClientEditSendKeys, (ModifierKeys.Alt | ModifierKeys.Control));

            // Taper 'kevin.basse@epsi.fr' dans 'mailClient' zone de texte
            uIMailClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIMailClientEditText1;

            // Clic 'Ajouter' bouton
            Mouse.Click(uIAjouterButton, new Point(51, 2));

            // Clic 'OK' bouton
            Mouse.Click(uIOKButton, new Point(63, 18));

            // Clic 'Gestion des clients' bouton
            Mouse.Click(uIGestiondesclientsButton, new Point(103, 36));

            // Clic 'Nouveau client' bouton
            Mouse.Click(uINouveauclientButton, new Point(105, 34));

            // Taper 'Kévin' dans 'prenomClient' zone de texte
            uIPrenomClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIPrenomClientEditText1;

            // Clic 'Ajouter un client' client
            Mouse.Click(uIAjouterunclientClient, new Point(203, 51));

            // Taper 'BASSE' dans 'nomClient' zone de texte
            uINomClientEdit.Text = this.ajoutClientSansAdresseL1Params.UINomClientEditText1;

            // Clic 'adr1Client' zone de texte
            Mouse.Click(uIAdr1ClientEdit, new Point(78, 4));

            // Taper '33850' dans 'cp_txtBox' zone de texte
            uICp_txtBoxEdit.Text = this.ajoutClientSansAdresseL1Params.UICp_txtBoxEditText1;

            // Taper 'Léognan' dans 'ville_txt' zone de texte
            uIVille_txtEdit.Text = this.ajoutClientSansAdresseL1Params.UIVille_txtEditText1;

            // Clic 'telClient' zone de texte
            Mouse.Click(uITelClientEdit, new Point(28, 3));

            // Taper '0549583748' dans 'telClient' zone de texte
            uITelClientEdit.Text = this.ajoutClientSansAdresseL1Params.UITelClientEditText1;

            // Taper 'kevin.basse' dans 'mailClient' zone de texte
            uIMailClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIMailClientEditText2;

            // Taper 'Alt, Control + 0' dans 'mailClient' zone de texte
            Keyboard.SendKeys(uIMailClientEdit, this.ajoutClientSansAdresseL1Params.UIMailClientEditSendKeys1, (ModifierKeys.Alt | ModifierKeys.Control));

            // Taper 'kevin.basse@epsi.fr' dans 'mailClient' zone de texte
            uIMailClientEdit.Text = this.ajoutClientSansAdresseL1Params.UIMailClientEditText3;

            // Clic 'Ajouter' bouton
            Mouse.Click(uIAjouterButton, new Point(50, 14));

            // Clic 'OK' bouton
            Mouse.Click(uIOKButton, new Point(52, 15));
        }
        
        #region Properties
        public virtual ajoutClientSansAdresseL1Params ajoutClientSansAdresseL1Params
        {
            get
            {
                if ((this.majoutClientSansAdresseL1Params == null))
                {
                    this.majoutClientSansAdresseL1Params = new ajoutClientSansAdresseL1Params();
                }
                return this.majoutClientSansAdresseL1Params;
            }
        }
        
        public UIGamilonWindow UIGamilonWindow
        {
            get
            {
                if ((this.mUIGamilonWindow == null))
                {
                    this.mUIGamilonWindow = new UIGamilonWindow();
                }
                return this.mUIGamilonWindow;
            }
        }
        
        public UIGestiondesclientsWindow1 UIGestiondesclientsWindow
        {
            get
            {
                if ((this.mUIGestiondesclientsWindow == null))
                {
                    this.mUIGestiondesclientsWindow = new UIGestiondesclientsWindow1();
                }
                return this.mUIGestiondesclientsWindow;
            }
        }
        
        public UIAjouterunclientWindow UIAjouterunclientWindow
        {
            get
            {
                if ((this.mUIAjouterunclientWindow == null))
                {
                    this.mUIAjouterunclientWindow = new UIAjouterunclientWindow();
                }
                return this.mUIAjouterunclientWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        #endregion
        
        #region Fields
        private ajoutClientSansAdresseL1Params majoutClientSansAdresseL1Params;
        
        private UIGamilonWindow mUIGamilonWindow;
        
        private UIGestiondesclientsWindow1 mUIGestiondesclientsWindow;
        
        private UIAjouterunclientWindow mUIAjouterunclientWindow;
        
        private UIErrorWindow mUIErrorWindow;
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'ajoutClientSansAdresseL1'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class ajoutClientSansAdresseL1Params
    {
        
        #region Fields
        /// <summary>
        /// Taper 'Kévin' dans 'prenomClient' zone de texte
        /// </summary>
        public string UIPrenomClientEditText = "Kévin";
        
        /// <summary>
        /// Taper 'BASSE' dans 'nomClient' zone de texte
        /// </summary>
        public string UINomClientEditText = "BASSE";
        
        /// <summary>
        /// Taper '33000' dans 'cp_txtBox' zone de texte
        /// </summary>
        public string UICp_txtBoxEditText = "33000";
        
        /// <summary>
        /// Taper 'BORDEAUX' dans 'ville_txt' zone de texte
        /// </summary>
        public string UIVille_txtEditText = "BORDEAUX";
        
        /// <summary>
        /// Taper '0559684950' dans 'telClient' zone de texte
        /// </summary>
        public string UITelClientEditText = "0559684950";
        
        /// <summary>
        /// Taper 'kevin.basse' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditText = "kevin.basse";
        
        /// <summary>
        /// Taper 'Alt, Control + 0' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditSendKeys = "0";
        
        /// <summary>
        /// Taper 'kevin.basse@epsi.fr' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditText1 = "kevin.basse@epsi.fr";
        
        /// <summary>
        /// Taper 'Kévin' dans 'prenomClient' zone de texte
        /// </summary>
        public string UIPrenomClientEditText1 = "Kévin";
        
        /// <summary>
        /// Taper 'BASSE' dans 'nomClient' zone de texte
        /// </summary>
        public string UINomClientEditText1 = "BASSE";
        
        /// <summary>
        /// Taper '33850' dans 'cp_txtBox' zone de texte
        /// </summary>
        public string UICp_txtBoxEditText1 = "33850";
        
        /// <summary>
        /// Taper 'Léognan' dans 'ville_txt' zone de texte
        /// </summary>
        public string UIVille_txtEditText1 = "Léognan";
        
        /// <summary>
        /// Taper '0549583748' dans 'telClient' zone de texte
        /// </summary>
        public string UITelClientEditText1 = "0549583748";
        
        /// <summary>
        /// Taper 'kevin.basse' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditText2 = "kevin.basse";
        
        /// <summary>
        /// Taper 'Alt, Control + 0' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditSendKeys1 = "0";
        
        /// <summary>
        /// Taper 'kevin.basse@epsi.fr' dans 'mailClient' zone de texte
        /// </summary>
        public string UIMailClientEditText3 = "kevin.basse@epsi.fr";
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIGamilonWindow : WinWindow
    {
        
        public UIGamilonWindow()
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gamilon";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gamilon");
            #endregion
        }
        
        #region Properties
        public UIGestiondesclientsWindow UIGestiondesclientsWindow
        {
            get
            {
                if ((this.mUIGestiondesclientsWindow == null))
                {
                    this.mUIGestiondesclientsWindow = new UIGestiondesclientsWindow(this);
                }
                return this.mUIGestiondesclientsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIGestiondesclientsWindow mUIGestiondesclientsWindow;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIGestiondesclientsWindow : WinWindow
    {
        
        public UIGestiondesclientsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gestion_client";
            this.WindowTitles.Add("Gamilon");
            #endregion
        }
        
        #region Properties
        public WinButton UIGestiondesclientsButton
        {
            get
            {
                if ((this.mUIGestiondesclientsButton == null))
                {
                    this.mUIGestiondesclientsButton = new WinButton(this);
                    #region Critères de recherche 
                    this.mUIGestiondesclientsButton.SearchProperties[WinButton.PropertyNames.Name] = "Gestion des clients";
                    this.mUIGestiondesclientsButton.WindowTitles.Add("Gamilon");
                    #endregion
                }
                return this.mUIGestiondesclientsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGestiondesclientsButton;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIGestiondesclientsWindow1 : WinWindow
    {
        
        public UIGestiondesclientsWindow1()
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Gestion des clients";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Gestion des clients");
            #endregion
        }
        
        #region Properties
        public UINouveauclientWindow UINouveauclientWindow
        {
            get
            {
                if ((this.mUINouveauclientWindow == null))
                {
                    this.mUINouveauclientWindow = new UINouveauclientWindow(this);
                }
                return this.mUINouveauclientWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINouveauclientWindow mUINouveauclientWindow;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UINouveauclientWindow : WinWindow
    {
        
        public UINouveauclientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn_ajouterClient";
            this.WindowTitles.Add("Gestion des clients");
            #endregion
        }
        
        #region Properties
        public WinButton UINouveauclientButton
        {
            get
            {
                if ((this.mUINouveauclientButton == null))
                {
                    this.mUINouveauclientButton = new WinButton(this);
                    #region Critères de recherche 
                    this.mUINouveauclientButton.SearchProperties[WinButton.PropertyNames.Name] = "Nouveau client";
                    this.mUINouveauclientButton.WindowTitles.Add("Gestion des clients");
                    #endregion
                }
                return this.mUINouveauclientButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINouveauclientButton;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIAjouterunclientWindow : WinWindow
    {
        
        public UIAjouterunclientWindow()
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Ajouter un client";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public UIPrenomClientWindow UIPrenomClientWindow
        {
            get
            {
                if ((this.mUIPrenomClientWindow == null))
                {
                    this.mUIPrenomClientWindow = new UIPrenomClientWindow(this);
                }
                return this.mUIPrenomClientWindow;
            }
        }
        
        public UINomClientWindow UINomClientWindow
        {
            get
            {
                if ((this.mUINomClientWindow == null))
                {
                    this.mUINomClientWindow = new UINomClientWindow(this);
                }
                return this.mUINomClientWindow;
            }
        }
        
        public UICp_txtBoxWindow UICp_txtBoxWindow
        {
            get
            {
                if ((this.mUICp_txtBoxWindow == null))
                {
                    this.mUICp_txtBoxWindow = new UICp_txtBoxWindow(this);
                }
                return this.mUICp_txtBoxWindow;
            }
        }
        
        public UIVille_txtWindow UIVille_txtWindow
        {
            get
            {
                if ((this.mUIVille_txtWindow == null))
                {
                    this.mUIVille_txtWindow = new UIVille_txtWindow(this);
                }
                return this.mUIVille_txtWindow;
            }
        }
        
        public UITelClientWindow UITelClientWindow
        {
            get
            {
                if ((this.mUITelClientWindow == null))
                {
                    this.mUITelClientWindow = new UITelClientWindow(this);
                }
                return this.mUITelClientWindow;
            }
        }
        
        public UIMailClientWindow UIMailClientWindow
        {
            get
            {
                if ((this.mUIMailClientWindow == null))
                {
                    this.mUIMailClientWindow = new UIMailClientWindow(this);
                }
                return this.mUIMailClientWindow;
            }
        }
        
        public UIAjouterWindow UIAjouterWindow
        {
            get
            {
                if ((this.mUIAjouterWindow == null))
                {
                    this.mUIAjouterWindow = new UIAjouterWindow(this);
                }
                return this.mUIAjouterWindow;
            }
        }
        
        public WinClient UIAjouterunclientClient
        {
            get
            {
                if ((this.mUIAjouterunclientClient == null))
                {
                    this.mUIAjouterunclientClient = new WinClient(this);
                    #region Critères de recherche 
                    this.mUIAjouterunclientClient.SearchProperties[WinControl.PropertyNames.Name] = "Ajouter un client";
                    this.mUIAjouterunclientClient.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIAjouterunclientClient;
            }
        }
        
        public UIAdr1ClientWindow UIAdr1ClientWindow
        {
            get
            {
                if ((this.mUIAdr1ClientWindow == null))
                {
                    this.mUIAdr1ClientWindow = new UIAdr1ClientWindow(this);
                }
                return this.mUIAdr1ClientWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPrenomClientWindow mUIPrenomClientWindow;
        
        private UINomClientWindow mUINomClientWindow;
        
        private UICp_txtBoxWindow mUICp_txtBoxWindow;
        
        private UIVille_txtWindow mUIVille_txtWindow;
        
        private UITelClientWindow mUITelClientWindow;
        
        private UIMailClientWindow mUIMailClientWindow;
        
        private UIAjouterWindow mUIAjouterWindow;
        
        private WinClient mUIAjouterunclientClient;
        
        private UIAdr1ClientWindow mUIAdr1ClientWindow;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIPrenomClientWindow : WinWindow
    {
        
        public UIPrenomClientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "prenomClient";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UIPrenomClientEdit
        {
            get
            {
                if ((this.mUIPrenomClientEdit == null))
                {
                    this.mUIPrenomClientEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUIPrenomClientEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Telephone";
                    this.mUIPrenomClientEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIPrenomClientEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPrenomClientEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UINomClientWindow : WinWindow
    {
        
        public UINomClientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nomClient";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomClientEdit
        {
            get
            {
                if ((this.mUINomClientEdit == null))
                {
                    this.mUINomClientEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUINomClientEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUINomClientEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomClientEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UICp_txtBoxWindow : WinWindow
    {
        
        public UICp_txtBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cp_txtBox";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UICp_txtBoxEdit
        {
            get
            {
                if ((this.mUICp_txtBoxEdit == null))
                {
                    this.mUICp_txtBoxEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUICp_txtBoxEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUICp_txtBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICp_txtBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIVille_txtWindow : WinWindow
    {
        
        public UIVille_txtWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ville_txt";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UIVille_txtEdit
        {
            get
            {
                if ((this.mUIVille_txtEdit == null))
                {
                    this.mUIVille_txtEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUIVille_txtEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Code postal non valide";
                    this.mUIVille_txtEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIVille_txtEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIVille_txtEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UITelClientWindow : WinWindow
    {
        
        public UITelClientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "telClient";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UITelClientEdit
        {
            get
            {
                if ((this.mUITelClientEdit == null))
                {
                    this.mUITelClientEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUITelClientEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adresse mail";
                    this.mUITelClientEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUITelClientEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITelClientEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIMailClientWindow : WinWindow
    {
        
        public UIMailClientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mailClient";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UIMailClientEdit
        {
            get
            {
                if ((this.mUIMailClientEdit == null))
                {
                    this.mUIMailClientEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUIMailClientEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIMailClientEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIMailClientEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIAjouterWindow : WinWindow
    {
        
        public UIAjouterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ajouter";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinButton UIAjouterButton
        {
            get
            {
                if ((this.mUIAjouterButton == null))
                {
                    this.mUIAjouterButton = new WinButton(this);
                    #region Critères de recherche 
                    this.mUIAjouterButton.SearchProperties[WinButton.PropertyNames.Name] = "Ajouter";
                    this.mUIAjouterButton.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIAjouterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAjouterButton;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIAdr1ClientWindow : WinWindow
    {
        
        public UIAdr1ClientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "adr1Client";
            this.WindowTitles.Add("Ajouter un client");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdr1ClientEdit
        {
            get
            {
                if ((this.mUIAdr1ClientEdit == null))
                {
                    this.mUIAdr1ClientEdit = new WinEdit(this);
                    #region Critères de recherche 
                    this.mUIAdr1ClientEdit.WindowTitles.Add("Ajouter un client");
                    #endregion
                }
                return this.mUIAdr1ClientEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdr1ClientEdit;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Critères de recherche 
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
